model User {
  id               Int             @id @default(autoincrement())
  username         String          @unique
  profileImage     String?
  sentMessages     DirectMessage[] @relation("sentMessages")
  receivedMessages DirectMessage[] @relation("receivedMessages")
  tweets           Tweet[]         @relation("Tweet")
  likedTweets      Tweet[]         @relation("LikeTweet")
  // likedReplys        TweetReply[]    @relation("LikeReply")
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  followings       User[]          @relation("Following")
  followers        User[]          @relation("Following")
}

model Tweet {
  id        Int       @id @default(autoincrement())
  message   String
  hashtags  Hashtag[]
  // replys    TweetReply[]
  user      User      @relation("Tweet", fields: [userId], references: [id])
  userId    Int
  likedBy   User[]    @relation("LikeTweet")
  replyBy   Tweet[]   @relation("TweetReply")
  replyTo   Tweet[]   @relation("TweetReply")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Hashtag {
  id        Int      @id @default(autoincrement())
  hashtag   String   @unique
  tweets    Tweet[]
  // tweetReplys TweetReply[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model TweetReply {
//   id            Int       @id @default(autoincrement())
//   message       String
//   tweet         Tweet     @relation(fields: [tweetId], references: [id])
//   tweetId       Int
//   createdAt     DateTime  @default(now())
//   updatedAt     DateTime  @updatedAt
//   likedBy       User?     @relation("LikeReply", fields: [likedByUserId], references: [id])
//   likedByUserId Int?
//   hashtags      Hashtag[]
// }

model DirectMessage {
  id         Int      @id @default(autoincrement())
  message    String
  fromUser   User     @relation("sentMessages", fields: [fromUserId], references: [id])
  fromUserId Int
  toUser     User     @relation("receivedMessages", fields: [toUserId], references: [id])
  toUserId   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_TWITTER")
}
